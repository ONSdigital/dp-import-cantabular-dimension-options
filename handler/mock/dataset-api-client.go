// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/dataset"
	"github.com/ONSdigital/dp-import-cantabular-dimension-options/handler"
	"sync"
)

var (
	lockDatasetAPIClientMockGetInstance             sync.RWMutex
	lockDatasetAPIClientMockPatchInstanceDimensions sync.RWMutex
	lockDatasetAPIClientMockPutInstanceState        sync.RWMutex
)

// Ensure, that DatasetAPIClientMock does implement handler.DatasetAPIClient.
// If this is not the case, regenerate this file with moq.
var _ handler.DatasetAPIClient = &DatasetAPIClientMock{}

// DatasetAPIClientMock is a mock implementation of handler.DatasetAPIClient.
//
//     func TestSomethingThatUsesDatasetAPIClient(t *testing.T) {
//
//         // make and configure a mocked handler.DatasetAPIClient
//         mockedDatasetAPIClient := &DatasetAPIClientMock{
//             GetInstanceFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, instanceID string, ifMatch string) (dataset.Instance, string, error) {
// 	               panic("mock out the GetInstance method")
//             },
//             PatchInstanceDimensionsFunc: func(ctx context.Context, serviceAuthToken string, instanceID string, data []*dataset.OptionPost, ifMatch string) (string, error) {
// 	               panic("mock out the PatchInstanceDimensions method")
//             },
//             PutInstanceStateFunc: func(ctx context.Context, serviceAuthToken string, instanceID string, state dataset.State, ifMatch string) (string, error) {
// 	               panic("mock out the PutInstanceState method")
//             },
//         }
//
//         // use mockedDatasetAPIClient in code that requires handler.DatasetAPIClient
//         // and then make assertions.
//
//     }
type DatasetAPIClientMock struct {
	// GetInstanceFunc mocks the GetInstance method.
	GetInstanceFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, instanceID string, ifMatch string) (dataset.Instance, string, error)

	// PatchInstanceDimensionsFunc mocks the PatchInstanceDimensions method.
	PatchInstanceDimensionsFunc func(ctx context.Context, serviceAuthToken string, instanceID string, data []*dataset.OptionPost, ifMatch string) (string, error)

	// PutInstanceStateFunc mocks the PutInstanceState method.
	PutInstanceStateFunc func(ctx context.Context, serviceAuthToken string, instanceID string, state dataset.State, ifMatch string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetInstance holds details about calls to the GetInstance method.
		GetInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// InstanceID is the instanceID argument value.
			InstanceID string
			// IfMatch is the ifMatch argument value.
			IfMatch string
		}
		// PatchInstanceDimensions holds details about calls to the PatchInstanceDimensions method.
		PatchInstanceDimensions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Data is the data argument value.
			Data []*dataset.OptionPost
			// IfMatch is the ifMatch argument value.
			IfMatch string
		}
		// PutInstanceState holds details about calls to the PutInstanceState method.
		PutInstanceState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// InstanceID is the instanceID argument value.
			InstanceID string
			// State is the state argument value.
			State dataset.State
			// IfMatch is the ifMatch argument value.
			IfMatch string
		}
	}
}

// GetInstance calls GetInstanceFunc.
func (mock *DatasetAPIClientMock) GetInstance(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, instanceID string, ifMatch string) (dataset.Instance, string, error) {
	if mock.GetInstanceFunc == nil {
		panic("DatasetAPIClientMock.GetInstanceFunc: method is nil but DatasetAPIClient.GetInstance was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		InstanceID       string
		IfMatch          string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CollectionID:     collectionID,
		InstanceID:       instanceID,
		IfMatch:          ifMatch,
	}
	lockDatasetAPIClientMockGetInstance.Lock()
	mock.calls.GetInstance = append(mock.calls.GetInstance, callInfo)
	lockDatasetAPIClientMockGetInstance.Unlock()
	return mock.GetInstanceFunc(ctx, userAuthToken, serviceAuthToken, collectionID, instanceID, ifMatch)
}

// GetInstanceCalls gets all the calls that were made to GetInstance.
// Check the length with:
//     len(mockedDatasetAPIClient.GetInstanceCalls())
func (mock *DatasetAPIClientMock) GetInstanceCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CollectionID     string
	InstanceID       string
	IfMatch          string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		InstanceID       string
		IfMatch          string
	}
	lockDatasetAPIClientMockGetInstance.RLock()
	calls = mock.calls.GetInstance
	lockDatasetAPIClientMockGetInstance.RUnlock()
	return calls
}

// PatchInstanceDimensions calls PatchInstanceDimensionsFunc.
func (mock *DatasetAPIClientMock) PatchInstanceDimensions(ctx context.Context, serviceAuthToken string, instanceID string, data []*dataset.OptionPost, ifMatch string) (string, error) {
	if mock.PatchInstanceDimensionsFunc == nil {
		panic("DatasetAPIClientMock.PatchInstanceDimensionsFunc: method is nil but DatasetAPIClient.PatchInstanceDimensions was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		ServiceAuthToken string
		InstanceID       string
		Data             []*dataset.OptionPost
		IfMatch          string
	}{
		Ctx:              ctx,
		ServiceAuthToken: serviceAuthToken,
		InstanceID:       instanceID,
		Data:             data,
		IfMatch:          ifMatch,
	}
	lockDatasetAPIClientMockPatchInstanceDimensions.Lock()
	mock.calls.PatchInstanceDimensions = append(mock.calls.PatchInstanceDimensions, callInfo)
	lockDatasetAPIClientMockPatchInstanceDimensions.Unlock()
	return mock.PatchInstanceDimensionsFunc(ctx, serviceAuthToken, instanceID, data, ifMatch)
}

// PatchInstanceDimensionsCalls gets all the calls that were made to PatchInstanceDimensions.
// Check the length with:
//     len(mockedDatasetAPIClient.PatchInstanceDimensionsCalls())
func (mock *DatasetAPIClientMock) PatchInstanceDimensionsCalls() []struct {
	Ctx              context.Context
	ServiceAuthToken string
	InstanceID       string
	Data             []*dataset.OptionPost
	IfMatch          string
} {
	var calls []struct {
		Ctx              context.Context
		ServiceAuthToken string
		InstanceID       string
		Data             []*dataset.OptionPost
		IfMatch          string
	}
	lockDatasetAPIClientMockPatchInstanceDimensions.RLock()
	calls = mock.calls.PatchInstanceDimensions
	lockDatasetAPIClientMockPatchInstanceDimensions.RUnlock()
	return calls
}

// PutInstanceState calls PutInstanceStateFunc.
func (mock *DatasetAPIClientMock) PutInstanceState(ctx context.Context, serviceAuthToken string, instanceID string, state dataset.State, ifMatch string) (string, error) {
	if mock.PutInstanceStateFunc == nil {
		panic("DatasetAPIClientMock.PutInstanceStateFunc: method is nil but DatasetAPIClient.PutInstanceState was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		ServiceAuthToken string
		InstanceID       string
		State            dataset.State
		IfMatch          string
	}{
		Ctx:              ctx,
		ServiceAuthToken: serviceAuthToken,
		InstanceID:       instanceID,
		State:            state,
		IfMatch:          ifMatch,
	}
	lockDatasetAPIClientMockPutInstanceState.Lock()
	mock.calls.PutInstanceState = append(mock.calls.PutInstanceState, callInfo)
	lockDatasetAPIClientMockPutInstanceState.Unlock()
	return mock.PutInstanceStateFunc(ctx, serviceAuthToken, instanceID, state, ifMatch)
}

// PutInstanceStateCalls gets all the calls that were made to PutInstanceState.
// Check the length with:
//     len(mockedDatasetAPIClient.PutInstanceStateCalls())
func (mock *DatasetAPIClientMock) PutInstanceStateCalls() []struct {
	Ctx              context.Context
	ServiceAuthToken string
	InstanceID       string
	State            dataset.State
	IfMatch          string
} {
	var calls []struct {
		Ctx              context.Context
		ServiceAuthToken string
		InstanceID       string
		State            dataset.State
		IfMatch          string
	}
	lockDatasetAPIClientMockPutInstanceState.RLock()
	calls = mock.calls.PutInstanceState
	lockDatasetAPIClientMockPutInstanceState.RUnlock()
	return calls
}

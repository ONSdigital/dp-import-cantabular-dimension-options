// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/dataset"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"sync"
)

var (
	lockDatasetAPIClientMockChecker                sync.RWMutex
	lockDatasetAPIClientMockPostInstanceDimensions sync.RWMutex
)

// DatasetAPIClientMock is a mock implementation of service.DatasetAPIClient.
//
//     func TestSomethingThatUsesDatasetAPIClient(t *testing.T) {
//
//         // make and configure a mocked service.DatasetAPIClient
//         mockedDatasetAPIClient := &DatasetAPIClientMock{
//             CheckerFunc: func(in1 context.Context, in2 *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             PostInstanceDimensionsFunc: func(ctx context.Context, serviceAuthToken string, instanceID string, data dataset.OptionPost) error {
// 	               panic("mock out the PostInstanceDimensions method")
//             },
//         }
//
//         // use mockedDatasetAPIClient in code that requires service.DatasetAPIClient
//         // and then make assertions.
//
//     }
type DatasetAPIClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(in1 context.Context, in2 *healthcheck.CheckState) error

	// PostInstanceDimensionsFunc mocks the PostInstanceDimensions method.
	PostInstanceDimensionsFunc func(ctx context.Context, serviceAuthToken string, instanceID string, data dataset.OptionPost) error

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *healthcheck.CheckState
		}
		// PostInstanceDimensions holds details about calls to the PostInstanceDimensions method.
		PostInstanceDimensions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Data is the data argument value.
			Data dataset.OptionPost
		}
	}
}

// Checker calls CheckerFunc.
func (mock *DatasetAPIClientMock) Checker(in1 context.Context, in2 *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("DatasetAPIClientMock.CheckerFunc: method is nil but DatasetAPIClient.Checker was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *healthcheck.CheckState
	}{
		In1: in1,
		In2: in2,
	}
	lockDatasetAPIClientMockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	lockDatasetAPIClientMockChecker.Unlock()
	return mock.CheckerFunc(in1, in2)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedDatasetAPIClient.CheckerCalls())
func (mock *DatasetAPIClientMock) CheckerCalls() []struct {
	In1 context.Context
	In2 *healthcheck.CheckState
} {
	var calls []struct {
		In1 context.Context
		In2 *healthcheck.CheckState
	}
	lockDatasetAPIClientMockChecker.RLock()
	calls = mock.calls.Checker
	lockDatasetAPIClientMockChecker.RUnlock()
	return calls
}

// PostInstanceDimensions calls PostInstanceDimensionsFunc.
func (mock *DatasetAPIClientMock) PostInstanceDimensions(ctx context.Context, serviceAuthToken string, instanceID string, data dataset.OptionPost) error {
	if mock.PostInstanceDimensionsFunc == nil {
		panic("DatasetAPIClientMock.PostInstanceDimensionsFunc: method is nil but DatasetAPIClient.PostInstanceDimensions was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		ServiceAuthToken string
		InstanceID       string
		Data             dataset.OptionPost
	}{
		Ctx:              ctx,
		ServiceAuthToken: serviceAuthToken,
		InstanceID:       instanceID,
		Data:             data,
	}
	lockDatasetAPIClientMockPostInstanceDimensions.Lock()
	mock.calls.PostInstanceDimensions = append(mock.calls.PostInstanceDimensions, callInfo)
	lockDatasetAPIClientMockPostInstanceDimensions.Unlock()
	return mock.PostInstanceDimensionsFunc(ctx, serviceAuthToken, instanceID, data)
}

// PostInstanceDimensionsCalls gets all the calls that were made to PostInstanceDimensions.
// Check the length with:
//     len(mockedDatasetAPIClient.PostInstanceDimensionsCalls())
func (mock *DatasetAPIClientMock) PostInstanceDimensionsCalls() []struct {
	Ctx              context.Context
	ServiceAuthToken string
	InstanceID       string
	Data             dataset.OptionPost
} {
	var calls []struct {
		Ctx              context.Context
		ServiceAuthToken string
		InstanceID       string
		Data             dataset.OptionPost
	}
	lockDatasetAPIClientMockPostInstanceDimensions.RLock()
	calls = mock.calls.PostInstanceDimensions
	lockDatasetAPIClientMockPostInstanceDimensions.RUnlock()
	return calls
}
